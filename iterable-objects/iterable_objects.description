// An object can make itself be iterable as a sequence of values of type T by providing a method named __iterator which
// returns a value that is a subtype of Iterator<T>. We refer to this type as Iterable<T>. Any type which is a subtype
// of abstract object {public next() returns record {| T value; |}?;}, is called Iterator<T>. An iterable object can be
// iterated over using foreach loop. In this example, `FibGenerator` is a subtype of Iterable<int> and `FibIterator` is
// a subtype of Iterator<int> and we print first 10 fibonacci numbers.
