// Ballerina is designed to ensure that programs written in Ballerina are inherently secure. With optional taint checking,
// Ballerina programs are resilient to major security vulnerabilities including SQL injection,
// path manipulation, file manipulation, unauthorized file access, and unvalidated redirect (open redirect).<br/><br/>
//
// A taint analysis mechanism is used to achieve this. As a result of the taint analysis mechanism, the Ballerina compiler
// identifies untrusted (tainted) data by observing how tainted data propagates through the program. If untrusted data
// is passed to a security sensitive parameter, a compile error is generated.<br/><br/>
// For more information, see [How to Write Secure Ballerina Programs](https://ballerina.io/swan-lake/learn/how-to-write-secure-ballerina-code/).
//
// Taint analysis is activated during the Ballerina compilation process either by providing `--taint-check` argument
// to the Ballerina `run` or `build` commands, or it can be activated for a given project by adding build option
// `taintCheck = true` to `Ballerina.toml` file under `[build-options]` section.
